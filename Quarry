--Refuels turtle from gathered coal, cleans out junk, and positions turtle accordingly. Rise: Should turtle place items in chest on surface. Fall: Should turtle come back down to next level.
function cleanInv(rise, fall)
    
    --Logic for rising.
    if rise then
        while not turtle.detectUp() do
            turtle.up()
        end
    end
    
    --Clean out inventory
    for i = 1, 16 do
		turtle.select(i)

		if turtle.getItemCount() > 0 then
			local data = turtle.getItemDetail()

			if blacklist[data.name] then
				turtle.dropDown()
			elseif turtle.refuel(0) then
				while turtle.getItemCount() > 0 do
					if turtle.getFuelLevel() < 6000 then
						turtle.refuel(1)
					elseif rise then
					    turtle.dropUp()
					else
						break
					end
				end
			else
				if rise then
					turtle.dropUp()
				end
			end
		end
	end
	turtle.select(1)
			    
    --Logic for falling
    if fall then
        while not turtle.detectDown() do
            turtle.down()
        end
    end
    
end

--Gravel / Sand proofing, Doesn't break blacklisted blocks above or below, so efficiency.
function digMoveCheck(blacklist)
    --Gravel / Sand
	while turtle.detect() do
	    turtle.dig()
	end
	turtle.forward()
	
	--Blacklist referencing.
	local success, data = turtle.inspectUp()
	if not blacklist[data.name] then
    	turtle.digUp()
    end

    local success, data = turtle.inspectDown()
    if not blacklist[data.name] then
    	turtle.digDown()
    end
end

--Create the blacklist of blocks the turtle shouldn't mine.
function createBlacklist()
	local blacklist = {}
	blacklist["minecraft:stone"] = true
	blacklist["minecraft:cobblestone"] = true
	blacklist["minecraft:grass"] = true
	blacklist["minecraft:dirt"] = true
	blacklist["minecraft:gravel"] = true
	blacklist["minecraft:sand"] = true
	blacklist["chisel:andesite"] = true
	blacklist["chisel:granite"] = true
	blacklist["chisel:diorite"] = true
	blacklist["chisel:limestone"] = true
	blacklist["chisel:marble"] = true
	blacklist["Botania:stone"] = true
	return blacklist
end

--The main bit of program; responsible for all the digging, inventory management, fuel management, etc.
function mineChunk()

    --Math for how many levels to mine based on the starting Y level. Possible GPS Integration in the future.
    levelsToMine = math.floor((startY - bedrock) / 3)
    print("")
    print("Levels To Mine In This Chunk: " .. levelsToMine)
    for levelsDone = 1,levelsToMine do
        
        --Dig to next level
        for i = 1,3 do
            turtle.digDown()
            turtle.down()
        end
        
        --Mine 15 blocks, turn right, mine 15 blocks.
        for i = 1,2 do
    		for i = 1,15 do
    		    digMoveCheck(blacklist)
    		end
    		turtle.turnRight()
    	end
    	
    	cleanInv(false, false)
    	
    	--Mine rows.
    	for rowsDone=1,15 do
    	    
    		digMoveCheck(blacklist)
            
            --Decides how the turtle should turn based on odd or even number of passes already completed.
    		if rowsDone % 2 == 1 then
    			turtle.turnRight()
    		else
    			turtle.turnLeft()
    		end
    
            --Finishes row
    		for rowsDone = 1,14 do
    			digMoveCheck(blacklist)
    		end
    
            --Checks if this is the last row to be done. If so, returns turtle to 1,1. If not, positions turtle for next loop.
    		if rowsDone == 15 then
    			turtle.forward()
    			turtle.turnRight()
    		elseif rowsDone % 2 == 1 then
    			turtle.turnLeft()
    		else
    			turtle.turnRight()
    		end
    		
    		--Puts all desirable items from that row in the chest. If that was that last row it won't come back down.
    		if levelsDone == levelsToMine then
    		    cleanInv(true,false)
    	    elseif rowsDone == 15 then
    	        cleanInv(true,true)
            else
                cleanInv(false,false)
            end
            
        end
    end
end

--Initial Parameters for the Quarry to use.
shell.run("clear")

io.write("Starting Y Level: ")
startY = read()
io.write("Top Bedrock Level: ")
bedrock = read()

blacklist = createBlacklist()
turtle.select(1)

startTime = os.clock()
mineChunk()
endTime = os.clock()

shell.run("clear")
print("Mined in " .. math.floor((endTime - startTime) / 3600 ) .. "h " .. math.floor((endTime - startTime) / 60) .. "m " .. (endTime - startTime) % 60 .. "s.")
